{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","PathfindingVisualizer/algorithms/BreadthFirstSearch.js","PathfindingVisualizer/algorithms/DepthFirstSearch.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","row","col","sourceNode","targetNode","color","className","id","style","backgroundColor","React","Component","BreadthFirstSearch","grid","visitedNodes","queue","parents","Map","set","push","length","currentNode","shift","getAdjacentNodes","adjacentNode","has","node","adjacentNodes","delta","drow","dcol","isValid","maxRow","maxCol","DepthFirstSearch","nodeStack","unshift","PathFindingVisualizer","state","currentRow","setState","markNode","inOrderNodes","get","reverse","onClick","BFS","DFS","reset","map","rowIdx","key","nodeIdx","a","sleep","document","getElementById","ms","Promise","resolve","setTimeout","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a7a99d8.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Node.css\";\n\nconst STANDARD_COLOR = \"whitesmoke\";\nconst SOURCE_COLOR = \"lightgreen\";\nconst TARGET_COLOR = \"lightcoral\";\nexport default class Node extends React.Component {\n  render() {\n    const { row, col, sourceNode, targetNode } = this.props;\n    const color = sourceNode\n      ? SOURCE_COLOR\n      : targetNode\n      ? TARGET_COLOR\n      : STANDARD_COLOR;\n\n    return (\n      <div\n        className=\"node\"\n        id={`${row}-${col}`}\n        style={{ backgroundColor: color }}\n      ></div>\n    );\n  }\n}\n","export const BreadthFirstSearch = (sourceNode, grid) => {\n  let visitedNodes = [];\n  let queue = [];\n  let parents = new Map();\n  parents.set(sourceNode, -1);\n  queue.push(sourceNode);\n\n  while (queue.length > 0) {\n    const currentNode = queue.shift();\n    visitedNodes.push(currentNode);\n    if (currentNode.targetNode) break;\n    for (const adjacentNode of getAdjacentNodes(currentNode, grid)) {\n      if (!parents.has(adjacentNode)) {\n        parents.set(adjacentNode, currentNode);\n        queue.push(adjacentNode);\n      }\n    }\n  }\n  return [parents, visitedNodes];\n};\n\nfunction getAdjacentNodes(node, grid) {\n  const deltas = [\n    [-1, 0],\n    [0, 1],\n    [1, 0],\n    [0, -1],\n  ];\n  let adjacentNodes = [];\n  for (const delta of deltas) {\n    const [drow, dcol] = delta;\n    const row = node.row + drow;\n    const col = node.col + dcol;\n    if (isValid(row, col, grid)) adjacentNodes.push(grid[row][col]);\n  }\n  return adjacentNodes;\n}\n\nfunction isValid(row, col, grid) {\n  const maxRow = grid.length - 1;\n  const maxCol = grid[0].length - 1;\n  return row >= 0 && row <= maxRow && col >= 0 && col <= maxCol;\n}\n\nexport default BreadthFirstSearch;\n","export const DepthFirstSearch = (sourceNode, grid) => {\n  let parents = new Map();\n  let visitedNodes = [];\n  let nodeStack = [sourceNode];\n\n  parents.set(sourceNode, -1);\n\n  while (nodeStack.length) {\n    const currentNode = nodeStack.shift();\n    visitedNodes.push(currentNode);\n    if (currentNode.targetNode) break;\n    for (const adjacentNode of getAdjacentNodes(currentNode, grid)) {\n      if (!parents.has(adjacentNode)) {\n        parents.set(adjacentNode, currentNode);\n        nodeStack.unshift(adjacentNode);\n      }\n    }\n  }\n\n  return [parents, visitedNodes];\n};\n\nfunction getAdjacentNodes(node, grid) {\n  const deltas = [\n    [-1, 0],\n    [0, 1],\n    [1, 0],\n    [0, -1],\n  ];\n  let adjacentNodes = [];\n  for (const delta of deltas) {\n    const [drow, dcol] = delta;\n    const row = node.row + drow;\n    const col = node.col + dcol;\n    if (isValid(row, col, grid)) adjacentNodes.push(grid[row][col]);\n  }\n  return adjacentNodes;\n}\n\nfunction isValid(row, col, grid) {\n  const maxRow = grid.length - 1;\n  const maxCol = grid[0].length - 1;\n  return row >= 0 && row <= maxRow && col >= 0 && col <= maxCol;\n}\n\nexport default DepthFirstSearch;\n","import React from \"react\";\nimport \"./PathfindingVisualizer.css\";\nimport Node from \"./Node/Node.jsx\";\nimport { BreadthFirstSearch } from \"./algorithms/BreadthFirstSearch.js\";\nimport { DepthFirstSearch } from \"./algorithms/DepthFirstSearch\";\n\nconst ROWS = 20;\nconst COLS = 40;\nconst SOURCE_ROW = 5;\nconst SOURCE_COL = 5;\nconst TARGET_ROW = 10;\nconst TARGET_COL = 38;\n\nconst STANDARD_COLOR = \"whitesmoke\";\nconst SOURCE_COLOR = \"lightgreen\";\nconst TARGET_COLOR = \"lightcoral\";\n\nexport default class PathFindingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid: [],\n    };\n  }\n\n  componentDidMount() {\n    const grid = [];\n    for (let row = 0; row < ROWS; row++) {\n      let currentRow = [];\n      for (let col = 0; col < COLS; col++) {\n        const currentNode = {\n          row: row,\n          col: col,\n          sourceNode: row === SOURCE_ROW && col === SOURCE_COL,\n          targetNode: row === TARGET_ROW && col === TARGET_COL,\n        };\n        currentRow.push(currentNode);\n      }\n      grid.push(currentRow);\n    }\n    this.setState({ grid: grid });\n  }\n\n  reset() {\n    const grid = this.state.grid;\n    for (const row of grid) {\n      for (const node of row) {\n        node.sourceNode\n          ? markNode(node, SOURCE_COLOR)\n          : node.targetNode\n          ? markNode(node, TARGET_COLOR)\n          : markNode(node, STANDARD_COLOR);\n      }\n    }\n  }\n\n  async BFS() {\n    const sourceNode = this.state.grid[SOURCE_ROW][SOURCE_COL];\n    const [parents, visitedNodes] = BreadthFirstSearch(\n      sourceNode,\n      this.state.grid\n    );\n\n    for (let node of visitedNodes) {\n      await markNode(node, \"thistle\");\n    }\n\n    let inOrderNodes = [];\n    let currentNode = this.state.grid[TARGET_ROW][TARGET_COL];\n    while (currentNode !== -1) {\n      inOrderNodes.push(currentNode);\n      currentNode = parents.get(currentNode);\n    }\n    inOrderNodes.reverse();\n    for (let node of inOrderNodes) {\n      await markNode(node, \"slategray\");\n    }\n  }\n\n  async DFS() {\n    const sourceNode = this.state.grid[SOURCE_ROW][SOURCE_COL];\n    const [parents, visitedNodes] = DepthFirstSearch(\n      sourceNode,\n      this.state.grid\n    );\n\n    for (let node of visitedNodes) {\n      await markNode(node, \"thistle\");\n    }\n\n    let inOrderNodes = [];\n    let currentNode = this.state.grid[TARGET_ROW][TARGET_COL];\n    while (currentNode !== -1) {\n      inOrderNodes.push(currentNode);\n      currentNode = parents.get(currentNode);\n    }\n    inOrderNodes.reverse();\n    for (let node of inOrderNodes) {\n      await markNode(node, \"slategray\");\n    }\n  }\n\n  render() {\n    const grid = this.state.grid;\n    return (\n      <>\n        <div className=\"top-container\">\n          {\" \"}\n          <button className=\"button-BFS\" onClick={() => this.BFS()}>\n            Breadth first search\n          </button>\n          <button className=\"button-DFS\" onClick={() => this.DFS()}>\n            Depth first search\n          </button>\n          <button className=\"button-reset\" onClick={() => this.reset()}>\n            Reset grid\n          </button>\n        </div>\n        <div className=\"grid\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { sourceNode, targetNode } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      row={rowIdx}\n                      col={nodeIdx}\n                      sourceNode={sourceNode}\n                      targetNode={targetNode}\n                    ></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n}\n\nasync function markNode(node, color) {\n  await sleep(1);\n  const row = node.row;\n  const col = node.col;\n  const visitedNodeStyle = document.getElementById(`${row}-${col}`).style;\n  visitedNodeStyle.backgroundColor = color;\n}\n\nfunction sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer.jsx'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}